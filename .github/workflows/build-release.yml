name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
          - target: i686-pc-windows-msvc
            os: windows-latest
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            cross: false
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Install cross (if needed)
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Build binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cp target/${{ matrix.target }}/release/tcp-over-ws-rust.exe artifacts/tcp-over-ws-rust-${{ matrix.target }}.exe
        else
          cp target/${{ matrix.target }}/release/tcp-over-ws-rust artifacts/tcp-over-ws-rust-${{ matrix.target }}
          chmod +x artifacts/tcp-over-ws-rust-${{ matrix.target }}
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tcp-over-ws-rust-${{ matrix.target }}
        path: artifacts/
        retention-days: 30

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check formatting
      run: cargo fmt --all -- --check

  create-release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            for file in "$dir"*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                target_name=$(basename "$dir")
                target_name=${target_name#tcp-over-ws-rust-}
                
                if [[ "$filename" == *.exe ]]; then
                  # Windows executable
                  cp "$file" "release-assets/tcp-over-ws-rust-${target_name}.exe"
                  cd release-assets && zip "tcp-over-ws-rust-${target_name}.zip" "tcp-over-ws-rust-${target_name}.exe" && cd ..
                else
                  # Unix executable
                  cp "$file" "release-assets/tcp-over-ws-rust-${target_name}"
                  cd release-assets && tar -czf "tcp-over-ws-rust-${target_name}.tar.gz" "tcp-over-ws-rust-${target_name}" && cd ..
                fi
              fi
            done
          fi
        done

    - name: Generate checksums
      run: |
        cd release-assets
        sha256sum *.zip *.tar.gz > checksums.txt
        cd ..

    - name: Extract release notes
      id: extract-release-notes
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract release notes from CHANGELOG.md if it exists
          VERSION=${GITHUB_REF#refs/tags/}
          awk "/^## \[?${VERSION#v}\]?|^## ${VERSION}/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md > release-notes.md
        else
          # Default release notes
          echo "Release ${{ github.ref_name }}" > release-notes.md
          echo "" >> release-notes.md
          echo "### Features" >> release-notes.md
          echo "- TCP over WebSocket tunneling" >> release-notes.md
          echo "- UDP over WebSocket tunneling" >> release-notes.md
          echo "- Cross-platform support" >> release-notes.md
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*.zip
          release-assets/*.tar.gz
          release-assets/checksums.txt
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit
